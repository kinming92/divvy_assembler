/////////////////////////////////////////////////////////////////////
//8bit variable
/////////////////////////////////////////////////////////////////////

#include <iostream>
#include <bitset>
#include <stdint.h>

using namespace std;
int main() {
//16 bit dividend
uint8_t Mdividend = 0xde;
uint8_t Ldividend = 0xca;

//8 bit divisor
uint8_t divisor = 0xcc;

//16 bit quotient and 8 bit decimal point
uint8_t Mquotient = 0;
uint8_t Lquotient = 0;
uint8_t quot_dp = 0;


uint8_t Mdividend_cp = Mdividend;
uint8_t Ldividend_cp = Ldividend;
uint8_t divisor_cp_2 = divisor;
uint8_t divisor_cp_1 = 0;
uint8_t divisor_cp_0 = 0;

uint8_t temp;
uint8_t temp2;

if(divisor == 0){
  Mquotient = 0xff;
  Lquotient = 0xff;
  quot_dp = 0xff;
  cout << "dividend: "<< bitset<8>(Mdividend) << " " << bitset<8>(Ldividend) <<endl;
  cout << "divisor: "<< bitset<8>(divisor)    <<endl;
  cout << "quotient: "<< bitset<8>(Mquotient) << " " << bitset<8>(Lquotient) <<endl;
  cout << "quotientdp: " << bitset<8>(quot_dp) <<endl;
  return 0;
  
}

while(  (divisor_cp_2 > 0) 
        ||	(divisor_cp_1 > 0)
        ||	(divisor_cp_0 >= divisor)	)
{
  
  if(	divisor_cp_2 > 0 
		|| divisor_cp_1 > Mdividend_cp
		|| (divisor_cp_1 == Mdividend_cp && divisor_cp_0 > Ldividend_cp)	)
  
  {
    //quotient <<= 1;
    //save the MSB of Lquotient
    int temp = Lquotient & 0x80;
    temp >>= 7;
    Lquotient <<= 1;
    Mquotient <<= 1;
    Mquotient |= temp;
    
  }else{
    //quotient <<= 1;
    
    temp = Lquotient & 0x80;
    temp >>= 7;
    Lquotient <<= 1;
    Mquotient <<= 1;
    Mquotient |= temp;

    //quotient |= 1;
    Lquotient |= 1;
    //divd -= divs;
    if ( Ldividend_cp < divisor_cp_0 ){
      temp = 0x01;
      temp = ~(temp);
      Mdividend_cp = Mdividend_cp + temp;
      Mdividend_cp = Mdividend_cp + 1;
    }
    
    temp = divisor_cp_0;
    temp = ~ ( divisor_cp_0 );
    Ldividend_cp = Ldividend_cp + temp;
    Ldividend_cp = Ldividend_cp + 1;
    
    temp = ~( divisor_cp_1);
    Mdividend_cp = Mdividend_cp + temp;
    Mdividend_cp = Mdividend_cp + 1;
  } //end of else
	  
  //divs >>= 1;
  temp = divisor_cp_2 & 0x01;
  temp <<= 7;
  divisor_cp_2 >>= 1;
	
	temp2 = divisor_cp_1 & 0x01;
	temp2 <<= 7;
	divisor_cp_1 >>= 1;
	divisor_cp_1 |= temp;
	
	divisor_cp_0 >>= 1;
	divisor_cp_0 |= temp2;

}
  
if (Mdividend_cp == 0 && Ldividend_cp == 0){
  std::cout<<"no remainder"<< std::endl;
  std::cout<<"store the decimalpoint back to the data mem"<< std::endl;
}

int i = 0;
while (i<8){
  //cout << "dividend_cp: "<< bitset<8>(Mdividend_cp) << " " << bitset<8>(Ldividend_cp) <<endl;
  //dividend_cp <<= 1;
  temp = Ldividend_cp & 0x80;
  temp >>= 7;
  Ldividend_cp <<= 1;
  Mdividend_cp <<= 1;
  Mdividend_cp |= temp;
  //cout << "temp: " << bitset<8>(temp) <<endl;
  // cout << "Before::::dividend_cp: "<< bitset<8>(Mdividend_cp) << " " << bitset<8>(Ldividend_cp) <<endl;
  //dividend_cp >= divisor
  if( (Mdividend_cp > 0) ||  Ldividend_cp >= divisor){
	// quotient_dp <<= 1
	quot_dp <<= 1;
	quot_dp |= 1;
  //cout << "Before - \t";
  //cout << "dividend_cp: "<< bitset<8>(Mdividend_cp) << " " << bitset<8>(Ldividend_cp) <<endl;
	// dividend_cp -= divisor
	if ( Ldividend_cp < divisor ){
      temp = 0x01;
      temp = ~(temp);
      Mdividend_cp = Mdividend_cp + temp;
      Mdividend_cp = Mdividend_cp + 1;
    }
    
    temp = divisor;
    temp = ~ ( divisor );
    Ldividend_cp = Ldividend_cp + temp;
    Ldividend_cp = Ldividend_cp + 1;
    
    temp = ~(0);
    Mdividend_cp = Mdividend_cp + temp;
    Mdividend_cp = Mdividend_cp + 1;

  //cout << "After - \t";
  //cout << "dividend_cp: "<< bitset<8>(Mdividend_cp) << " " << bitset<8>(Ldividend_cp) <<endl;
  
  }else{
	  quot_dp <<= 1;
  }
  
  i++;
}




cout << "dividend: "<< bitset<8>(Mdividend) << " " << bitset<8>(Ldividend) <<endl;
cout << "divisor: "<< bitset<8>(divisor)    <<endl;
cout << "quotient: "<< bitset<8>(Mquotient) << " " << bitset<8>(Lquotient) <<endl;
cout << "quotientdp: " << bitset<8>(quot_dp) <<endl;
}
/////////////////////////////////////////////////////////////////////////////
//two while loop

#include <iostream>
#include <stdint.h>
#include <bitset>

using namespace std;

int main()
{
  uint16_t rem = 0;
  uint16_t dividend = 0xdeed;
  uint16_t quotient = 0;
  uint8_t quotientdp = 0;
  uint8_t divisor =  0xba;

  uint32_t divs = divisor;
  uint16_t divd = dividend;
  divs = divs << 16;
 
while( divs >= divisor ){
	if ( divs > divd ){
    	quotient <<= 1;
	}
	else {
    	quotient <<= 1;
    	quotient |= 1;
    	divd -= divs;
	}
    	divs >>= 1;
}
rem = divd;
if (divd == 0){
  cout<<"no remainder"<<endl;
  cout<<"store the decimalpoint back to the data mem"<<endl;
}

int i = 0;
while (i<8){
  //cout << "rem: " << bitset<16>(rem) << endl;
  rem <<= 1;
  if(rem >= divisor){

	  quotientdp <<= 1;
	  quotientdp |= 1;
    //cout << "Before - \t";
   // cout << "rem: " << bitset<16>(rem) << endl;
	  rem -= divisor;
    //cout << "after - \t";
    //cout << "rem: " << bitset<16>(rem) << endl;
  }else{
	  quotientdp <<= 1;
  }
  i++;
}
	cout << "dividend: "<< bitset<16>(dividend)  <<endl;
	cout << "divisor: "<< bitset<8>(divisor) <<endl;
	cout << "quotient: "<< bitset<16>(quotient) <<endl;
	cout << "quotientdp: " << bitset<8>(quotientdp) <<endl;



}

//////////////////////////////////////////////////////////////////////////////////



//16/32/8 bit variable

//one while loop

#include <iostream>
#include <stdint.h>
#include <bitset>

void func(uint16_t,uint8_t);
using namespace std;

int main()
{
  uint16_t rem = 0;
  uint16_t dividend = 0x1;
  uint32_t quotient = 0; //quotient should be 24 bit
  uint8_t quotientdp = 0;
  uint8_t divisor =  0xff;

  uint32_t divs = divisor;  // we actually need 32 bit for this problem
  uint32_t divd = dividend; // we actually need 16+8 bit for this problem
  divd <<= 8;
  divs = divs << 24;
  //cout << "div: "<<  bitset<32>(divs) << endl;
  //cout <<"divd: "<< bitset<16>(divd) << endl;
 
 int j = 0;
while( j<25 ){
	if ( divs > divd ){
    	quotient <<= 1;
	}
	else {
    	quotient <<= 1;
    	quotient |= 1;
    	divd -= divs;
	}
    	divs >>= 1;
      j++;
      //cout << "divs: " << bitset<32>(divs) << endl;
      //cout << "divd: " << "----------------" << bitset<16>(divd) << endl;
}

cout << "dividend: "<< bitset<16>(dividend)  <<endl;
cout << "divisor: "<< bitset<8>(divisor) <<endl;
cout << "quotient: "<< bitset<24>(quotient) <<endl;
func(dividend, divisor);
}



void func(uint16_t n, uint8_t d){
   uint16_t rem = 0;
  uint16_t dividend = n;
  uint16_t quotient = 0;
  uint8_t quotientdp = 0;
  uint8_t divisor =  d;

  uint32_t divs = divisor;
  uint16_t divd = dividend;
  divs = divs << 16;
 
while( divs >= divisor ){
	if ( divs > divd ){
    	quotient <<= 1;
	}
	else {
    	quotient <<= 1;
    	quotient |= 1;
    	divd -= divs;
	}
    	divs >>= 1;
}
rem = divd;
if (divd == 0){
  //cout<<"no remainder"<<endl;
  //cout<<"store the decimalpoint back to the data mem"<<endl;
}

int i = 0;
while (i<8){
  //cout << "rem: " << bitset<16>(rem) << endl;
  rem <<= 1;
  if(rem >= divisor){

	  quotientdp <<= 1;
	  quotientdp |= 1;
    //cout << "Before - \t";
   // cout << "rem: " << bitset<16>(rem) << endl;
	  rem -= divisor;
    //cout << "after - \t";
    //cout << "rem: " << bitset<16>(rem) << endl;
  }else{
	  quotientdp <<= 1;
  }
  i++;
}
  cout << "quotient: "<< bitset<16>(quotient);
	cout << "" << bitset<8>(quotientdp) <<endl;
}

//////////////////////////////////////////////////////////
//work on progress
/////////////////////////////////////////////////////////////////////
//8bit variable
/////////////////////////////////////////////////////////////////////

#include <iostream>
#include <bitset>
#include <stdint.h>

using namespace std;
int main() {
//16 bit dividend
uint8_t Mdividend = 0xde;
uint8_t Ldividend = 0xca;

//8 bit divisor
uint8_t divisor = 0xcc;

//16 bit quotient and 8 bit decimal point
uint8_t Mquotient = 0;
uint8_t Lquotient = 0;
uint8_t quot_dp = 0;


uint8_t Mdividend_cp = Mdividend;
uint8_t Ldividend_cp = Ldividend;
uint8_t divisor_cp_2 = divisor;
uint8_t divisor_cp_1 = 0;
uint8_t divisor_cp_0 = 0;

uint8_t temp;
uint8_t temp2;

if(divisor == 0){
  Mquotient = 0xff;
  Lquotient = 0xff;
  quot_dp = 0xff;
  cout << "dividend: "<< bitset<8>(Mdividend) << " " << bitset<8>(Ldividend) <<endl;
  cout << "divisor: "<< bitset<8>(divisor)    <<endl;
  cout << "quotient: "<< bitset<8>(Mquotient) << " " << bitset<8>(Lquotient) <<endl;
  cout << "quotientdp: " << bitset<8>(quot_dp) <<endl;
  return 0;
  
}

while(  (divisor_cp_2 > 0) 
        ||	(divisor_cp_1 > 0)
        ||	(divisor_cp_0 >= divisor)	)
{
  
  if(	divisor_cp_2 > 0 
		|| divisor_cp_1 > Mdividend_cp
		|| (divisor_cp_1 == Mdividend_cp && divisor_cp_0 > Ldividend_cp)	)
  
  {
    //quotient <<= 1;
    //save the MSB of Lquotient
    int temp = Lquotient & 0x80;
    temp >>= 7;
    Lquotient <<= 1;
    Mquotient <<= 1;
    Mquotient |= temp;
    
  }else{
    //quotient <<= 1;
    
    temp = Lquotient & 0x80;
    temp >>= 7;
    Lquotient <<= 1;
    Mquotient <<= 1;
    Mquotient |= temp;

    //quotient |= 1;
    Lquotient |= 1;
    //divd -= divs;
    if ( Ldividend_cp < divisor_cp_0 ){
      temp = 0x01;
      temp = ~(temp);
      Mdividend_cp = Mdividend_cp + temp;
      Mdividend_cp = Mdividend_cp + 1;
    }
    
    temp = divisor_cp_0;
    temp = ~ ( divisor_cp_0 );
    Ldividend_cp = Ldividend_cp + temp;
    Ldividend_cp = Ldividend_cp + 1;
    
    temp = ~( divisor_cp_1);
    Mdividend_cp = Mdividend_cp + temp;
    Mdividend_cp = Mdividend_cp + 1;
  } //end of else
	  
  //divs >>= 1;
  temp = divisor_cp_2 & 0x01;
  temp <<= 7;
  divisor_cp_2 >>= 1;
	
	temp2 = divisor_cp_1 & 0x01;
	temp2 <<= 7;
	divisor_cp_1 >>= 1;
	divisor_cp_1 |= temp;
	
	divisor_cp_0 >>= 1;
	divisor_cp_0 |= temp2;

}
  
if (Mdividend_cp == 0 && Ldividend_cp == 0){
  std::cout<<"no remainder"<< std::endl;
  std::cout<<"store the decimalpoint back to the data mem"<< std::endl;
}

int i = 0;
while (i<8){
  //cout << "dividend_cp: "<< bitset<8>(Mdividend_cp) << " " << bitset<8>(Ldividend_cp) <<endl;
  //dividend_cp <<= 1;
  temp = Ldividend_cp & 0x80;
  temp >>= 7;
  Ldividend_cp <<= 1;
  Mdividend_cp <<= 1;
  Mdividend_cp |= temp;
  //cout << "temp: " << bitset<8>(temp) <<endl;
  // cout << "Before::::dividend_cp: "<< bitset<8>(Mdividend_cp) << " " << bitset<8>(Ldividend_cp) <<endl;
  //dividend_cp >= divisor
  if( (Mdividend_cp > 0) ||  Ldividend_cp >= divisor){
	// quotient_dp <<= 1
	quot_dp <<= 1;
	quot_dp |= 1;
  //cout << "Before - \t";
  //cout << "dividend_cp: "<< bitset<8>(Mdividend_cp) << " " << bitset<8>(Ldividend_cp) <<endl;
	// dividend_cp -= divisor
	if ( Ldividend_cp < divisor ){
      temp = 0x01;
      temp = ~(temp);
      Mdividend_cp = Mdividend_cp + temp;
      Mdividend_cp = Mdividend_cp + 1;
    }
    
    temp = divisor;
    temp = ~ ( divisor );
    Ldividend_cp = Ldividend_cp + temp;
    Ldividend_cp = Ldividend_cp + 1;
    
    temp = ~(0);
    Mdividend_cp = Mdividend_cp + temp;
    Mdividend_cp = Mdividend_cp + 1;

  //cout << "After - \t";
  //cout << "dividend_cp: "<< bitset<8>(Mdividend_cp) << " " << bitset<8>(Ldividend_cp) <<endl;
  
  }else{
	  quot_dp <<= 1;
  }
  
  i++;
}


cout << "dividend: "<< bitset<8>(Mdividend) << " " << bitset<8>(Ldividend) <<endl;
cout << "divisor: "<< bitset<8>(divisor)    <<endl;
cout << "quotient: "<< bitset<8>(Mquotient) << " " << bitset<8>(Lquotient) <<endl;
cout << "quotientdp: " << bitset<8>(quot_dp) <<endl;
}


void var_8(uint16_t n, uint8_t d){
  uint8_t Mdividend = 0;
  uint8_t Ldividend =0;

  uint8_t divisor = 0;

  uint8_t divisor_cp_0 = 0;
  uint8_t divisor_cp_1 = 0;
  uint8_t divisor_cp_2 = 0;
  uint8_t divisor_cp_3 = divisor;
  
  uint8_t dividend_cp_0 = 0;
  uint8_t dividend_cp_1 = Ldividend;
  uint8_t dividend_cp_2 = Mdividend;

  uint8_t quotient_0 = 0;
  uint8_t quotient_1 = 0;
  uint8_t quotient_dp = 0;


  uint8_t i = 0;
  uint8_t temp;
  uint8_t temp2;

  while(i<25){
    if( divisor_cp_3 > 0
      || (divisor_cp_2 == dividend_cp_2 && divisor_cp_1 > dividend_cp_1 )
      || (divisor_cp_2 == dividend_cp_2 && divisor_cp_1 == dividend_cp_1 && divisor_cp_0>dividend_cp_0)
      ){
            //quotient <<= 1;
            temp = quotient_dp & 0x80;
            temp >>= 7;
            
            temp2 = quotient_0 & 0x80;
            temp2 >>= 7;
            
            quotient_dp <<= 1;
            quotient_0 <<= 1;
            quotient_1 <<= 1;
            
            quotient_0 |= temp;
            quotient_1 |= temp2;

      }else{
        	//quotient <<= 1;
            temp = quotient_dp & 0x80;
            temp >>= 7;
            
            temp2 = quotient_0 & 0x80;
            temp2 >>= 7;
            
            quotient_dp <<= 1;
            quotient_0 <<= 1;
            quotient_1 <<= 1;
            
            quotient_0 |= temp;
            quotient_1 |= temp2;
    	    //quotient |= 1;
            quotient_dp |= 1;
    	    //divd -= divs;
              //divd -= divs;
    if ( Ldividend_cp < divisor_cp_0 ){
      temp = 0x01;
      temp = ~(temp);
      Mdividend_cp = Mdividend_cp + temp;
      Mdividend_cp = Mdividend_cp + 1;
    }
    
    temp = divisor_cp_0;
    temp = ~ ( divisor_cp_0 );
    Ldividend_cp = Ldividend_cp + temp;
    Ldividend_cp = Ldividend_cp + 1;
    
    temp = ~( divisor_cp_1);
    Mdividend_cp = Mdividend_cp + temp;
    Mdividend_cp = Mdividend_cp + 1; 


      }
  }


}

////////////////////////////////////////////////////////
//test a - b using 8 bit variable 
//////////////////////////////////////////////////////
#include <iostream>
#include <bitset>
#include <stdint.h>
using namespace std;

int main() {
  uint32_t a = 0x8c0000;
  uint32_t b = 0x000001;
  uint32_t result;
  result = a-b;

  cout << "result: "<< bitset<24>(result)<<endl;

  uint8_t a_0 = 0x00;
  uint8_t a_1 = 0x00;
  uint8_t a_2 = 0x8c;
  uint8_t b_0 = 0x01; 
  uint8_t b_1 = 0x00;
  uint8_t b_2 = 0x00;

  uint8_t temp;

  temp = 0x01;
  temp = ~(temp);

  //a - b
  if ( a_0 < b_0 ){
    a_1 = a_1 + temp;
    a_1 += 1;
    
    if( a_1 < b_1 ){
      a_2 = a_2 + temp;
      a_2 += 1;
    }

  }
    
    temp = ~ ( b_0 );
    a_0 = a_0 + temp;
    a_0 += 1;
    
    temp = ~( b_1);
    a_1 += temp;
    a_1 += 1;

    temp = ~(b_2);
    a_2 += temp;
    a_2 += 1;

      cout << "result: "<< bitset<8>(a_2) << bitset<8>(a_1) << bitset<8>(a_0) <<endl;
  return 0;
  
}
